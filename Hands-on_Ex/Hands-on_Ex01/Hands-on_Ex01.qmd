---
title: "Hands-on Exercise 1"
author: "Tan Zhi Hao"
date: "`r Sys.Date()`"
---

# Getting Started

## Install and launching R packages

The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse)
```

## Importing the data

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

# Plotting a simple bar chart

#\| eval: false -\> to hide output

#\| echo: false -\> to hide code

```{r}
ggplot(data = exam_data,
       aes(x = RACE)) +
  geom_bar()
```

```{r}
hist(exam_data$MATHS)
```

```{r}
ggplot(data = exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 10,
                 boundary = 100,
                 color = "black",
                 fill = "grey") +
  ggtitle("Distribution of Maths scores")
```

```{r}
ggplot(data=exam_data,
       aes(x=MATHS))
```

```{r}
ggplot(data=exam_data,
       aes(x=RACE)) +
  geom_bar()
```

```{r}
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_dotplot(dotsize = 0.5)
```

```{r}
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_dotplot(binwidth = 2.5,
               dotsize = 0.5) +
  scale_y_continuous(NULL, 
                     breaks = NULL)
```

```{r}
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_histogram()
```

```{r}
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_histogram(bins=20,
                 color = "black",
                 fill = "light blue")
```

```{r}
ggplot(data=exam_data,
       aes(x=MATHS,
           fill = GENDER)) +
  geom_histogram(bins=20,
                 color = "grey30")
```

```{r}
ggplot(data=exam_data,
       aes(x=MATHS)) +
  geom_density()
```

```{r}
ggplot(data=exam_data,
       aes(x=MATHS,
           colour = GENDER)) +
  geom_density()
```

```{r}
ggplot(data=exam_data,
       aes(y = MATHS,
           x = GENDER)) +
  geom_boxplot()
```

```{r}
ggplot(data=exam_data,
       aes(y = MATHS,
           x = GENDER)) +
  geom_boxplot(notch = TRUE)
```

```{r}
ggplot(data=exam_data,
       aes(y = MATHS,
           x = GENDER)) +
  geom_boxplot() +
  geom_point(position = "jitter",
             size = 0.5)
```

```{r}
ggplot(data=exam_data,
       aes(y = MATHS,
           x = GENDER)) +
  geom_violin()
```

```{r}
ggplot(data=exam_data,
       aes(y = MATHS,
           x = GENDER)) +
  geom_violin(fill="light blue") +
  geom_boxplot(alpha=0.5)
```

```{r}
ggplot(data=exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point()
```

```{r}
ggplot(data=exam_data,
       aes(y = MATHS,
           x = GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",
               fun.y = "mean",
               colour = "red",
               size = 4)
```

```{r}
ggplot(data=exam_data,
       aes(y = MATHS,
           x = GENDER)) +
  geom_boxplot() +
  geom_point(stat = "summary",
             fun.y = "mean",
             colour = "red",
             size = 4)
```

```{r}
ggplot(data=exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() +
  geom_smooth(size=0.5)
```

```{r}
ggplot(data=exam_data,
       aes(x = MATHS,
           y = ENGLISH)) +
  geom_point() + 
  geom_smooth(method=lm,
              size=0.5)
```

```{r}
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

```{r}
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20) +
  facet_grid(~ CLASS)
```

```{r}
ggplot(data=exam_data,
       aes(y = MATHS,
           x = CLASS)) +
  geom_boxplot() +
  facet_grid(~ GENDER)
```

```{r}
ggplot(data=exam_data,
       aes(y = MATHS,
           x = CLASS)) +
  geom_boxplot() +
  facet_grid(GENDER ~.)
```

```{r}
ggplot(data=exam_data,
       aes(y = MATHS,
           x = GENDER)) +
  geom_boxplot() +
  facet_grid(GENDER ~ CLASS)
```

```{r}
ggplot(data=exam_data,
       aes(x = RACE)) +
  geom_bar() +
  coord_flip()
```

```{r}
ggplot(data=exam_data,
       aes(y = RACE)) +
  geom_bar()
```

```{r}
ggplot(data=exam_data,
       aes(x = MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method = lm,
              size = 0.5) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))
```

```{r}
ggplot(data=exam_data,
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```

```{r}
ggplot(data=exam_data,
       aes(x = RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal() +
  theme(panel.background = element_rect(
    fill = "lightblue",
    colour = "lightblue",
    size = 0.5,
    linetype = "solid"),
    panel.grid.major = element_line(
      size = 0.5,
      linetype = 'solid',
      colour = "white"),
    panel.grid.minor = element_line(
      size = 0.25,
      linetype = 'solid',
      colour = "white"))
```

```{r}
ggplot(data=exam_data,
       aes(x = reorder(RACE,RACE,
                       function(x)-length(x)))) +
  geom_bar() +
  ylim(0,220) +
  geom_text(stat = "count",
      aes(label=paste0(..count.., ", ",
      round(..count../sum(..count..)*100,
            1), "%")),
      vjust=-1) +
  xlab("Race") + 
  ylab("No. of\nPupils") +
  theme(axis.title.y = element_text(angle=0))
```

```{r}
ggplot(data=exam_data,
       aes(x = MATHS)) +
  geom_histogram(bins = 20,
                 colour = "black",
                 fill = "light blue") +
  geom_vline(aes(xintercept=mean(MATHS,
                                 na.rm=T)),
             colour="red",
             linetype="dashed",
             size=1) +
  geom_vline(aes(xintercept=median(MATHS,
                                   na.rm = T)),
             colour="grey30",
             linetype="dashed",
             size = 1)
```

```{r}
d <- exam_data
d_bg <- d[, -3]

ggplot(d, aes(x = ENGLISH, fill = GENDER)) +
  geom_histogram(data = d_bg, fill= "grey", alpha=.5) +
  geom_histogram(colour = "black") +
  facet_wrap(~ GENDER) +
  guides(fill = FALSE) +
  theme_bw()
```

```{r}
ggplot(data=exam_data,
       aes(x = MATHS, y = ENGLISH)) +
  geom_point() +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  geom_hline(yintercept = 50,
             linetype ="dashed",
             colour="grey60",
             size = 1) +
  geom_vline(xintercept=50,
             linetype = "dashed",
             colour="grey60",
             size=1)
```
