---
title: "Take-home Exercise 02"
author: "Tan Zhi Hao"
affiliation: 'SMU MITB'
date: 27 Jan 2023
date modified: "`r Sys.Date()`"
format:
  html: 
    code-fold: true
---

# 1. Overview

This exercise is based on a take-home exercise 1 submission prepared by a [classmate](https://public.tableau.com/app/profile/joseph.zexeong.tan/viz/SingaporePopulationPyramindJun2022v1_3/trel3x3_d?publish=yes). The peer submission will be critiqued in terms of clarity and aesthetics, and the original design will be remade using the data visualization principles and best practice learnt in Lesson 1 and 2.

The dataset used in take-home exercise 1 and 2 is a CSV file extracted from [Singstat website](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) named *'respopagesextod2022'* and processed by RStudio `tidyverse` family of packages and visualized by `ggplot2` and its extensions.

# 2. Preparation

## 2.1 Install and launching R packages

The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched into R.

```{r}
pacman::p_load(tidyverse)

library(plotly)
```

## 2.2 Importing the data

The code chunk below imports respopagesextod2022.csv from the data folder into R by using read_csv() of readr and save it as an tibble data frame called data.

```{r}
pop_data <- read_csv("data/respopagesextod2022.csv")
head(pop_data)
```

## 2.3 Ordering Age Group

The code chunk below orders the Age groups sequentially, by planning area, age group and sex.

```{r}
pop_data$AG <- gsub("_", 
                    " ", 
                    pop_data$AG, 
                    fixed = TRUE)

ag_order <- c("0 to 4", "5 to 9", "10 to 14", "15 to 19", "20 to 24", "25 to 29", "30 to 34", "35 to 39", "40 to 44", "45 to 49", "50 to 54", "55 to 59", "60 to 64", "65 to 69", "70 to 74", "75 to 79", "80 to 84", "85 to89", "90 and over")

pop_ordered <- pop_data %>%
  group_by(`PA`, `AG`,`Sex`) %>%
  summarise(`Count` = sum(`Pop`)) %>%
  mutate(AG = factor(AG, levels = ag_order)) %>%
  arrange(AG) %>%
  ungroup()

```

## 2.4 Filtering Planning Areas

It looks like ZeXeong selected the planning areas based on the top 9 population sizes. The code chunk below filters these 9 planning areas.

```{r}
t9_pa <- pop_data %>%
  group_by(`PA`) %>%
  summarise(`Count` = sum(`Pop`)) %>%
  ungroup()

t9 <- arrange(t9_pa, desc(t9_pa$Count)) %>%
  slice(1:9) %>%
  select(`PA`)

t9_only1 <- pop_ordered %>% 
  filter(pop_ordered$PA %in% t9$PA)

t9_only = na.omit(t9_only1)

head(t9_only)
```

# 3. Visualization Critique and Remake

## 3.1 Critique of Grid Facet to Display Population Pyramids in a Row

![Figure 1: Original design by classmate row Trellis](images/image-133158159.png)

### 3.1.1 Critique

#### 3.1.1.1 Clarity

***What works:***

\(A\) As there are only 9 planning areas, this grid facet to display the pyramids in a row works as we can clearly see the side by side comparison of each planning area.

(B)The planning area labels are clearly stated at the top of each planning area.

***What doesn't work and why:***

\(A\) Title\
\
**The title does not provide sufficient detail about the data being visualized**. It simply states 'Compare the Feasibility for Visual Analysis by Two Trellis Layouts of 9 Population Pyramids'. It does not say the data is for which country's population and for which year. A more appropriate title will be 'Age-Sex Pyramid for Selected Planning Areas in Singapore, 2022'

\(B\) Axes

**The x-axis does not have a label telling us what is the information being shown. It is also not shown even at the bottom of the dashboard**. The legend at the bottom shows us which color represents which sex but it is insufficient to tell us is this a count or proportion, nor does it tell us the units. In general, if the word 'count' is used (e.g. Male Count), this tells us it is a number.

\(C\) Grid

With an x-axis values, it would also be good to include vertical grid lines as the x-axis is in continuous numbers.

#### 3.1.1.2 Aesthetics

***What doesn't work and why:***

\(A\) Colour\
\
**The colors used to represent Male and Female are not intuitive.** By convention, Blue is used to represent Male and Red/Pink is used to represent Female. Of course, this is only based on convention and not a hard rule, but for people who are used to the conventional colors, at first glance, we may think that the right side of the pyramids are representing Males.

**The horizontal alternating color shading (i.e. grey-white-grey-white) does not seem to be necessary** as the age groups are in 'discrete horizontal bars' and not 'continuous'. The alternating shading also seem to be missing for the left side of each pyramid, which may be distracting.

\(B\) Data labels

**The labels for the count being displayed overlapping the bars can make the charts very messy.** It may also be hard to read the numbers for the top of the pyramid where the bars are short. Some solutions are to either display the numbers outside the bar (non-overlapping), change the numbers to thousands using 'k', or not display the numbers at all since there is already a tooltip displaying information as you hover over the bars.

### 3.1.2 Remake

-   Changed title to 'Age-Sex Pyramid in Singapore, 2022'.

-   Added a x-axis label 'Population Count' as well as the x-axis values of up to 15k on each side in steps of 5k as well as grid lines for more clarity.

-   Changed the colors of the bars to Blue for 'Males' and Pink for 'Females'. Removed alternating shading.

-   Removed count value label display for each bar.

-   In the tooltip, unnecessary information is removed. When hovering over 'Females', only the AG, sex and female count is shown and similarly for 'Males'.

```{r}

AgSxPyr_t9 <- ggplot(t9_only, aes(x = AG, y = Count, fill = Sex)) +
  geom_bar(data = subset(t9_only, 
                         Sex == "Males"), 
           aes(x = AG, 
               y = -Count, 
               fill = Sex), 
           stat = "identity" 
          ) +
  geom_bar(data = subset(t9_only, 
                         Sex == "Females"), 
           aes(x = AG, 
               y = Count, 
               fill = Sex), 
           stat = "identity" 
           ) +
  scale_y_continuous(breaks = seq(-15000, 15000, 5000), 
                     labels = paste0(
                       as.character(
                         c(seq(15, 0, -5), 
                           seq(5, 15, 5))),
                       "k")) +
  coord_flip() +
  facet_grid(~ PA) +
  labs (y = "Population Count", 
        x = "Age Group", 
        title = 'Age-Sex Pyramid in Singapore, 2022') +
  theme_bw() +
  theme(axis.ticks.y = element_blank()) +
  scale_fill_manual(values = c("Males" = "lightblue", 
                               "Females" = "lightpink")) 

ggplotly(AgSxPyr_t9, 
         session = "knitr")
```

## 3.2 Critique of Wrap Facet to Display Population Pyramids 3 by 3 Matrix

![Figure 2: Original design by classmate 3x3 Trellis](images/image-1481469006.png)

### 3.2.1 Critique

#### 3.2.1.1 Clarity

What works and doesn't work in point 3.1.1.1 for the Grid Facet in a row all apply to this 3x3 Trellis as well.

#### 3.2.1.2 Aesthetics

What works and doesn't work in point 3.1.1.2 for the Grid Facet in a row all apply to this 3x3 Trellis as well.

In addition, **it would be good to remove unnecessary information to avoid confusion in the tooltip** such as the 'Column along PA' and 'Row along PA'. We can also remove 'Male Population' when hovering over Female and remove 'Female Population' when hovering over 'Male'

### 3.2.2 Remake

-   Changed title to 'Age-Sex Pyramid in Singapore, 2022'.

-   Added a x-axis label 'Population Count' as well as the x-axis values of up to 15k on each side in steps of 5k as well as grid lines for more clarity.

-   Changed the colors of the bars to Blue for 'Males' and Pink for 'Females'. Removed alternating shading.

-   Removed count value label display for each bar.

-   In the tooltip, unnecessary information is removed. 'Column along PA' and 'Row along PA' are removed. When hovering over 'Females', only the AG, sex and female count is shown and similarly for 'Males'.

-   The labels for Planning Area are now at the middle top of each micro chart in the Trellis display.

```{r}
AgSxPyr_t9 <- ggplot(t9_only, aes(x = AG, y = Count, fill = Sex)) +
  geom_bar(data = subset(t9_only, 
                         Sex == "Males"), 
           aes(x = AG, 
               y = -Count, 
               fill = Sex), 
           stat = "identity" 
           ) +
  geom_bar(data = subset(t9_only, 
                         Sex == "Females"), 
           aes(x = AG, 
               y = Count, 
               fill = Sex), 
           stat = "identity" 
          ) +
  scale_y_continuous(breaks = seq(-15000, 15000, 5000), 
                     labels = paste0(
                       as.character(
                         c(seq(15, 0, -5), 
                           seq(5, 15, 5))),
                       "k")) +
  coord_flip() +
  facet_wrap(~ PA) +
  labs (y = "Population Count", 
        x = "Age Group", 
        title = 'Age-Sex Pyramid in Singapore, 2022') +
  theme_bw() +
  theme(axis.ticks.y = element_blank()) +
  scale_fill_manual(values = c("Males" = "lightblue", 
                               "Females" = "lightpink")) 

ggplotly(AgSxPyr_t9, 
         session = "knitr")
```

# 4. Learning Points
